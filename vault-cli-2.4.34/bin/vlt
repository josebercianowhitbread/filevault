#!/bin/sh
# ----------------------------------------------------------------------------
# File Vault Start Up Batch script
#
# Required ENV vars:
# ------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
#   VLT_HOME - location of vault's installed home dir
#   VLT_OPTS - parameters passed to the Java VM when running Vault
#     e.g. to debug vault itself, use
#       set VLT_OPTS=-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
# ----------------------------------------------------------------------------

if [ -f /etc/vaultrc ] ; then
  . /etc/vaultrc
fi

if [ -f "$HOME/.vaultrc" ] ; then
  . "$HOME/.vaultrc"
fi

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false
case "`uname`" in
  CYGWIN*) cygwin=true ;;
  MINGW*) mingw=true;;
  Darwin*) darwin=true 
           if [ -z "$JAVA_VERSION" ] ; then
             JAVA_VERSION="CurrentJDK"
           else
             echo "Using Java version: $JAVA_VERSION"
           fi
           if [ -z "$JAVA_HOME" ] ; then
             JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/${JAVA_VERSION}/Home
           fi
           ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

if [ -z "$VLT_HOME" ] ; then
  ## resolve links - $0 may be a link to vlts home
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  VLT_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  VLT_HOME=`cd "$VLT_HOME" && pwd`

  cd "$saveddir"
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$VLT_HOME" ] &&
    VLT_HOME=`cygpath --unix "$VLT_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# For Migwn, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$VLT_HOME" ] &&
    VLT_HOME="`(cd "$VLT_HOME"; pwd)`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD=java
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly."
  echo "  We cannot execute $JAVACMD"
  exit 1
fi

if [ -z "$JAVA_HOME" ] ; then
  echo "Warning: JAVA_HOME environment variable is not set."
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$VLT_HOME" ] &&
    VLT_HOME=`cygpath --path --windows "$VLT_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$HOME" ] &&
    HOME=`cygpath --path --windows "$HOME"`
fi

JVM_OPTS="-Xmx256m -Dvlt.home=${VLT_HOME}"
  
# try to determine terminal width
COLS=$COLUMNS
if [ -x "/bin/stty" ]; then
	TERM_SIZE=`/bin/stty size 2>/dev/null` 
	for a in ${TERM_SIZE}; do
		COLS=$a
	done
fi
if [ -n "$COLS" ]; then
	JVM_OPTS="${JVM_OPTS} -Denv.term.width=${COLS}"
fi

MAIN_CLASS="-Dlauncher.main.class=com.day.jcr.vault.cli.VaultFsApp -jar ${VLT_HOME}/lib/launcher.jar"

exec "$JAVACMD" \
  $VLT_OPTS \
  $JVM_OPTS \
  ${MAIN_CLASS} "$@"

